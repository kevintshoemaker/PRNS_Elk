var2="std.ndvi",
allvars=allmains,  #names(thisdf)[-c(1,2,3,4,5,6,7,8,9)]
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
#}else{
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#}
}
# }
#counter3 <- counter3+1
}
panel=panel+1
if(panel %in% onleft){
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0,0.5, tools::toTitleCase(ordr2$season[counter3]),adj=0,cex=1.5)
counter=counter+1
}else if (panel %in% ontop){
if(panel==1){
par(mai=c(0,0,0,0))
plot(0,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}else{
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0.5,0.5, c("Collar","Count","P(1+)")[counter2],adj=0.5,cex=1.5)
counter2=counter2+1
}
} else{
#par(mai=base$mai)
par(mai=c(0.1,0.1,0.0,0.0))
season <- ordr2$season[counter3]
thisdf <- dfs[[ordr2$dat[counter3]]][[season]]
tmp <- as.character(thisres[[season]]$names[grepl("std",thisres[[season]]$names)])
allmains <- tmp[!grepl(":",tmp)]
#if(season!="summer"){
if(ordr2$dat[counter3]==2){
if(!is.na(allcoefrsf[[season]]["std.slope:std.aspect"])){
VisualizeInteraction_col(data=thisdf,model=bestmods_collar2[[season]],  #meancoefs=thisres[[season]],
var1="std.slope",
var2="std.aspect",
allvars=allmains,
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
}else{
#if(season!="parturition"){
if(!all(is.na(c(allcoefs[[season]]["std.slope:std.aspect"],
allcoefsz[[season]]["std.slope:std.aspect"])))){
VisualizeInteraction(data=thisdf,model=bestmods[[season]]@model,
var1="std.slope",
var2="std.ndvi",
allvars=allmains,  #names(thisdf)[-c(1,2,3,4,5,6,7,8,9)]
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
#}else{
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#}
}
# }
#counter3 <- counter3+1
}
panel=panel+1
if(panel %in% onleft){
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0,0.5, tools::toTitleCase(ordr2$season[counter3]),adj=0,cex=1.5)
counter=counter+1
}else if (panel %in% ontop){
if(panel==1){
par(mai=c(0,0,0,0))
plot(0,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}else{
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0.5,0.5, c("Collar","Count","P(1+)")[counter2],adj=0.5,cex=1.5)
counter2=counter2+1
}
} else{
#par(mai=base$mai)
par(mai=c(0.1,0.1,0.0,0.0))
season <- ordr2$season[counter3]
thisdf <- dfs[[ordr2$dat[counter3]]][[season]]
tmp <- as.character(thisres[[season]]$names[grepl("std",thisres[[season]]$names)])
allmains <- tmp[!grepl(":",tmp)]
#if(season!="summer"){
if(ordr2$dat[counter3]==2){
if(!is.na(allcoefrsf[[season]]["std.slope:std.aspect"])){
VisualizeInteraction_col(data=thisdf,model=bestmods_collar2[[season]],  #meancoefs=thisres[[season]],
var1="std.slope",
var2="std.aspect",
allvars=allmains,
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
}else{
#if(season!="parturition"){
if(!all(is.na(c(allcoefs[[season]]["std.slope:std.aspect"],
allcoefsz[[season]]["std.slope:std.aspect"])))){
VisualizeInteraction(data=thisdf,model=bestmods[[season]]@model,
var1="std.slope",
var2="std.ndvi",
allvars=allmains,  #names(thisdf)[-c(1,2,3,4,5,6,7,8,9)]
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
#}else{
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#}
}
# }
#counter3 <- counter3+1
}
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
VisualizeInteraction_col <- function(data=final.data$mating,model=bestmods$mating,var1=ints[[t]][1],var2=ints[[t]][2],allvars=names(df)[-c(1,6:13)],season=season,svg=T){
len <- 20     # increase this for higher-res figures
dataclasses <- sapply(data,class)
var1_2 <- strsplit(var1,"\\.")[[1]][2]
var2_2 <- strsplit(var2,"\\.")[[1]][2]
realmean1 <- mean(data[[var1_2]])
realsd1 <- sd(data[[var1_2]])
realmean2 <- mean(data[[var2_2]])
realsd2 <- sd(data[[var2_2]])
standvar1 <- var1
standvar2 <- var2
firstdim <- data[,standvar1]
seconddim <- data[,standvar2]
range1 <- seq(min(firstdim),max(firstdim),length=len)
range2 <- seq(min(seconddim),max(seconddim),length=len)
newdata <- expand.grid(range1,range2)
# head(newdata,50)
names(newdata) <- c(standvar1,standvar2)
othervars <- allvars[!allvars%in%c(standvar1,standvar2,"TotalElk")]
var = othervars[2]
for(var in othervars){
thisvar <- data[[var]]
if(is.factor(thisvar)){
tab <- table(thisvar)
vals <- names(tab)
levs <- levels(thisvar)
mostcom <- vals[which.max(tab)]
newvec <- factor(rep(mostcom,times=nrow(newdata)),levels=levs)
newdata[[var]] <- newvec
}else{
newdata[[var]] <- mean(thisvar)
}
}
newdata$ID <- data$ID[1]
newdata$weights <- 1
pred  <- predict(model,newdata,type="response",allow.new.levels=TRUE)
predmat <-  1-matrix(pred,nrow=len,ncol=len)
#predmat_ct <-  matrix(pred_ct,nrow=len,ncol=len)
if(svg){
svg(sprintf("intplots_%s_%s_%s.svg",var1_2,var2_2,season),width=4.5,height = 6)
layout(matrix(c(1:2),nrow=2))
par(mai=c(0,0,0,0))
}else{
var1_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var1)] #strsplit(var1,"\\.")[[1]][2]
var2_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var2)] #strsplit(var2,"\\.")[[1]][2]
}
x.axis <- realmean1+realsd1*2*range1
min.x <- min(x.axis)
max.x <- max(x.axis)
xrange <- max.x-min.x
x.axis2 <- seq(min.x,max.x,length=5)[c(2:4)]
y.axis <- realmean2+realsd2*2*range2
min.y <- min(y.axis)
max.y <- max(y.axis)
yrange <- max.y-min.y
y.axis2 <- seq(min.y,max.y,length=5)[c(2:4)]
z.axis <- seq(min(predmat), min(100,max(predmat)), length=5)[c(2:4)]
min.z <- min(predmat)
max.z <- min(100,max(predmat))
zrange <- max.z-min.z
predmat[which(predmat>max.z,arr.ind = T)] <- max.z
xlab=paste("",var1_2,sep="")
ylab=paste("",var2_2,sep="")
zlab="Sel. intens."
persp(x.axis,y.axis,predmat,zlim=c(min.z,max.z),
axes=F,
theta = 55, phi = 40, r = sqrt(10), d = 3,
ticktype = "detailed", mgp = c(4, 1, 0)) -> res
# lines(trans3d(x.axis, min.y, min.z, res) , col="black",lwd=2)
# lines(trans3d(max.x, y.axis, min.z, res) , col="black",lwd=2)
# lines(trans3d(min.x, min.y, z.axis, res) , col="black",lwd=2)
labels <- sprintf("%.1f",x.axis2)
label.pos <- trans3d(x.axis2, (min.y - yrange*0.3), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30, cex=1)
labels <- xlab
label.pos <- trans3d(x.axis2[1]-xrange*0.3, (min.y - yrange*0.4), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30+100+180, cex=1)
labels <- sprintf("%.1f",y.axis2)
label.pos <- trans3d((max.x + xrange*0.15), y.axis2, min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1)
labels <- ylab
label.pos <- trans3d((max.x + xrange*0.4), y.axis2[2], min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1,srt=25)
labels <- sprintf("%.1f",z.axis)
label.pos <- trans3d(min.x, (min.y - yrange*0.1), z.axis, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1)
labels <- zlab
label.pos <- trans3d((min.x), (min.y -5.5), z.axis[3], res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1,srt=100)
var1_2 <- strsplit(var1,"\\.")[[1]][2]
var2_2 <- strsplit(var2,"\\.")[[1]][2]
subst <- data[sample(1:nrow(data),1000,replace = F),]
points(trans3d(subst[[var1_2]], subst[[var2_2]], max(predmat)+0, pmat = res), col = gray(0.8), pch = 19, cex=0.5)
if(!svg){
var1_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var1)] #strsplit(var1,"\\.")[[1]][2]
var2_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var2)] #strsplit(var2,"\\.")[[1]][2]
}
if(svg) dev.off()
}
VisualizeInteraction <- function(data=final.data$mating,model=bestmods$mating,var1=ints[[t]][1],var2=ints[[t]][2],allvars=names(df)[-c(1,6:13)],season=season,svg=T){
len <- 20     # increase this for higher-res figures
dataclasses <- sapply(data,class)
var1_2 <- strsplit(var1,"\\.")[[1]][2]
var2_2 <- strsplit(var2,"\\.")[[1]][2]
realmean1 <- mean(data[[var1_2]])
realsd1 <- sd(data[[var1_2]])
realmean2 <- mean(data[[var2_2]])
realsd2 <- sd(data[[var2_2]])
standvar1 <- var1
standvar2 <- var2
firstdim <- data[,standvar1]
seconddim <- data[,standvar2]
range1 <- seq(min(firstdim),max(firstdim),length=len)
range2 <- seq(min(seconddim),max(seconddim),length=len)
newdata <- expand.grid(range1,range2)
# head(newdata,50)
names(newdata) <- c(standvar1,standvar2)
othervars <- allvars[!allvars%in%c(standvar1,standvar2,"TotalElk")]
var = othervars[2]
for(var in othervars){
thisvar <- data[[var]]
if(is.factor(thisvar)){
tab <- table(thisvar)
vals <- names(tab)
levs <- levels(thisvar)
mostcom <- vals[which.max(tab)]
newvec <- factor(rep(mostcom,times=nrow(newdata)),levels=levs)
newdata[[var]] <- newvec
}else{
newdata[[var]] <- mean(thisvar)
}
}
newdata$ID <- data$ID[1]
pred_pz <- predict(model,newdata,type="zprob")
pred_ct <- predict(model,newdata,type="conditional")
predmat_pz <-  1-matrix(pred_pz,nrow=len,ncol=len)
predmat_ct <-  matrix(pred_ct,nrow=len,ncol=len)
if(svg){
svg(sprintf("intplots_%s_%s_%s.svg",var1_2,var2_2,season),width=4.5,height = 6)
layout(matrix(c(1:2),nrow=2))
par(mai=c(0,0,0,0))
}else{
var1_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var1)] #strsplit(var1,"\\.")[[1]][2]
var2_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var2)] #strsplit(var2,"\\.")[[1]][2]
}
x.axis <- realmean1+realsd1*2*range1
min.x <- min(x.axis)
max.x <- max(x.axis)
xrange <- max.x-min.x
x.axis2 <- seq(min.x,max.x,length=5)[c(2:4)]
y.axis <- realmean2+realsd2*2*range2
min.y <- min(y.axis)
max.y <- max(y.axis)
yrange <- max.y-min.y
y.axis2 <- seq(min.y,max.y,length=5)[c(2:4)]
z.axis <- seq(min(predmat_ct), min(100,max(predmat_ct)), length=5)[c(2:4)]
min.z <- min(predmat_ct)
max.z <- min(100,max(predmat_ct))
zrange <- max.z-min.z
predmat_ct[which(predmat_ct>max.z,arr.ind = T)] <- max.z
xlab=paste("",var1_2,sep="")
ylab=paste("",var2_2,sep="")
zlab="Count"
persp(x.axis,y.axis,predmat_ct,zlim=c(min.z,max.z),
axes=F,
theta = 55, phi = 40, r = sqrt(10), d = 3,
ticktype = "detailed", mgp = c(4, 1, 0)) -> res
# lines(trans3d(x.axis, min.y, min.z, res) , col="black",lwd=2)
# lines(trans3d(max.x, y.axis, min.z, res) , col="black",lwd=2)
# lines(trans3d(min.x, min.y, z.axis, res) , col="black",lwd=2)
labels <- sprintf("%.1f",x.axis2)
label.pos <- trans3d(x.axis2, (min.y - yrange*0.3), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30, cex=1)
labels <- xlab
label.pos <- trans3d(x.axis2[1]-xrange*0.3, (min.y - yrange*0.4), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30+100+180, cex=1)
labels <- sprintf("%.1f",y.axis2)
label.pos <- trans3d((max.x + xrange*0.15), y.axis2, min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1)
labels <- ylab
label.pos <- trans3d((max.x + xrange*0.4), y.axis2[2], min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1,srt=25)
labels <- sprintf("%.0f",z.axis)
label.pos <- trans3d(min.x, (min.y - yrange*0.1), z.axis, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1)
labels <- zlab
label.pos <- trans3d((min.x), (min.y -5.3), z.axis[3], res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1,srt=100)
var1_2 <- strsplit(var1,"\\.")[[1]][2]
var2_2 <- strsplit(var2,"\\.")[[1]][2]
subst <- data[sample(1:nrow(data),1000,replace = F),]
points(trans3d(subst[[var1_2]], subst[[var2_2]], max(predmat_ct)+0, pmat = res), col = gray(0.8), pch = 19, cex=0.5)
if(!svg){
var1_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var1)] #strsplit(var1,"\\.")[[1]][2]
var2_2 <- varlist2[[season]]$readable[which(varlist2[[season]]$var==var2)] #strsplit(var2,"\\.")[[1]][2]
}
x.axis <- realmean1+realsd1*2*range1
min.x <- min(x.axis)
max.x <- max(x.axis)
xrange <- max.x-min.x
x.axis2 <- seq(min.x,max.x,length=5)[c(2:4)]
y.axis <- realmean2+realsd2*2*range2
min.y <- min(y.axis)
max.y <- max(y.axis)
yrange <- max.y-min.y
y.axis2 <- seq(min.y,max.y,length=5)[c(2:4)]
z.axis <- seq(min(predmat_pz), max(predmat_pz), length=5)[c(2:4)]
min.z <- min(predmat_pz)
max.z <-max(predmat_pz)
zrange <- max.z-min.z
xlab=paste("\n\n",var1_2,sep="")
ylab=paste("\n\n",var2_2,sep="")
zlab="\n\nP(1+)"
persp(x.axis,y.axis,predmat_pz,zlim=c(min.z,max.z),
axes=F,
theta = 55, phi = 40, r = sqrt(10), d = 3,
ticktype = "detailed", mgp = c(4, 1, 0)) -> res
# lines(trans3d(x.axis, min.y, min.z, res) , col="black",lwd=2)
# lines(trans3d(max.x, y.axis, min.z, res) , col="black",lwd=2)
# lines(trans3d(min.x, min.y, z.axis, res) , col="black",lwd=2)
labels <- sprintf("%.1f",x.axis2)
label.pos <- trans3d(x.axis2, (min.y - yrange*0.3), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30, cex=1)
labels <- xlab
label.pos <- trans3d(x.axis2[1]-xrange*0.3, (min.y - yrange*0.25), min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), srt=30+100+180, cex=1)
labels <- sprintf("%.1f",y.axis2)
label.pos <- trans3d((max.x + xrange*0.12), y.axis2, min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1)
labels <- ylab
label.pos <- trans3d((max.x + xrange*0.2), y.axis2[3]-yrange*0.1, min.z, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(0, NA), cex=1,srt=25)
labels <- sprintf("%.1f",z.axis)
label.pos <- trans3d(min.x, (min.y - yrange*0.1), z.axis, res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1)
labels <- zlab
label.pos <- trans3d((min.x), (min.y -5.3), z.axis[3], res)
text(label.pos$x, label.pos$y, labels=labels, adj=c(1, NA), cex=1,srt=100)
var1_2 <- strsplit(var1,"\\.")[[1]][2]
var2_2 <- strsplit(var2,"\\.")[[1]][2]
# subst <- data[sample(1:nrow(data),1000,replace = F),]
points(trans3d(subst[[var1_2]], subst[[var2_2]], max(predmat_pz)-0, pmat = res), col = gray(0.8), pch = 19, cex=0.5)
if(svg) dev.off()
}
svg("int_asp_slope.svg",7,7)
ordr2 <- ordr
layout(matrix(1:20,nrow=5,byrow = T),widths = c(2,4,4,4),heights=c(1,4,4,4,4))
onleft <- c(5,8,11,14)
ontop <- c(1,2,3,4)
counter=1
counter2=1
counter3=1
panel=0
panel=panel+1
for(panel in c(1:16)){
if(panel %in% onleft){
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0,0.5, tools::toTitleCase(ordr2$season[counter3]),adj=0,cex=1.5)
counter=counter+1
}else if (panel %in% ontop){
if(panel==1){
par(mai=c(0,0,0,0))
plot(0,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}else{
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0.5,0.5, c("Collar","Count","P(1+)")[counter2],adj=0.5,cex=1.5)
counter2=counter2+1
}
} else{
#par(mai=base$mai)
par(mai=c(0.1,0.1,0.0,0.0))
season <- ordr2$season[counter3]
thisdf <- dfs[[ordr2$dat[counter3]]][[season]]
tmp <- as.character(thisres[[season]]$names[grepl("std",thisres[[season]]$names)])
allmains <- tmp[!grepl(":",tmp)]
#if(season!="summer"){
if(ordr2$dat[counter3]==2){
if(!is.na(allcoefrsf[[season]]["std.slope:std.aspect"])){
VisualizeInteraction_col(data=thisdf,model=bestmods_collar2[[season]],  #meancoefs=thisres[[season]],
var1="std.slope",
var2="std.aspect",
allvars=allmains,
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
}else{
#if(season!="parturition"){
if(!all(is.na(c(allcoefs[[season]]["std.slope:std.aspect"],
allcoefsz[[season]]["std.slope:std.aspect"])))){
VisualizeInteraction(data=thisdf,model=bestmods[[season]]@model,
var1="std.slope",
var2="std.ndvi",
allvars=allmains,  #names(thisdf)[-c(1,2,3,4,5,6,7,8,9)]
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
#}else{
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#}
}
# }
#counter3 <- counter3+1
}
}
dev.off()
allcoefs[[season]]["std.slope:std.aspect"]
allcoefsz[[season]]["std.slope:std.aspect"]
svg("int_asp_slope.svg",7,7)
ordr2 <- ordr
layout(matrix(1:20,nrow=5,byrow = T),widths = c(2,4,4,4),heights=c(1,4,4,4,4))
onleft <- c(5,8,11,14)
ontop <- c(1,2,3,4)
counter=1
counter2=1
counter3=1
panel=0
panel=panel+1
for(panel in c(1:16)){
if(panel %in% onleft){
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0,0.5, tools::toTitleCase(ordr2$season[counter3]),adj=0,cex=1.5)
counter=counter+1
}else if (panel %in% ontop){
if(panel==1){
par(mai=c(0,0,0,0))
plot(0,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}else{
par(mai=c(0,0,0,0))
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
text(0.5,0.5, c("Collar","Count","P(1+)")[counter2],adj=0.5,cex=1.5)
counter2=counter2+1
}
} else{
#par(mai=base$mai)
par(mai=c(0.1,0.1,0.0,0.0))
season <- ordr2$season[counter3]
thisdf <- dfs[[ordr2$dat[counter3]]][[season]]
tmp <- as.character(thisres[[season]]$names[grepl("std",thisres[[season]]$names)])
allmains <- tmp[!grepl(":",tmp)]
#if(season!="summer"){
if(ordr2$dat[counter3]==2){
if(!is.na(allcoefrsf[[season]]["std.slope:std.aspect"])){
VisualizeInteraction_col(data=thisdf,model=bestmods_collar2[[season]],  #meancoefs=thisres[[season]],
var1="std.slope",
var2="std.aspect",
allvars=allmains,
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
}else{
#if(season!="parturition"){
if(!all(is.na(c(allcoefs[[season]]["std.slope:std.aspect"],
allcoefsz[[season]]["std.slope:std.aspect"])))){
VisualizeInteraction(data=thisdf,model=bestmods[[season]]@model,
var1="std.slope",
var2="std.aspect",
allvars=allmains,  #names(thisdf)[-c(1,2,3,4,5,6,7,8,9)]
season=season,svg=F)
}else{
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
}
counter3 <- counter3+1
#}else{
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#  plot(1,1,xlim=c(0,1),ylim=c(0,1),bty="n",xlab="",ylab="",xaxt="n",yaxt="n",main="",pch="")
#}
}
# }
#counter3 <- counter3+1
}
}
dev.off()
